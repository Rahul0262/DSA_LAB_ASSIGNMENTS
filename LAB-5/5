#include<stdio.h>
int n,arr[100];
int q0[100],q1[100],q2[100]; 
int f0=0,f1=0,f2=0,b0=0,b1=0,b2=0;
int aux[100], top = 0;
void swap(int *a,int *b)
{
    int tmp=*a;
    *a=*b;
    *b=tmp;
}

void bubblesort(int ar[],int p)
{
    for(int i=0;i<p-1;i++)
        for(int j=0;j<p-i-1;j++)
            if(ar[j]>ar[j+1])
                swap(&ar[j],&ar[j+1]);
}

void populateAux(int aux[],int q0[],int q1[],int q2[]) 
{ 
    // Put all items of first queue in aux[] 
    while (f0!=b0) { 
        aux[top++] = q0[f0]; 
        f0++; 
    } 
  
    // Put all items of second queue in aux[] 
    while (f1!=b1) { 
        aux[top++] = q1[f1]; 
        f1++; 
    } 
  
    // Put all items of third queue in aux[] 
    while (f2!=b2) { 
        aux[top++] = q2[f2]; 
        f2++; 
    } 
} 

int findmaxnum(int arr[],int n)
{
    // Step 1: sort the array in non-decreasing order 
    bubblesort(arr,n); 
  
    // Create 3 queues to store numbers with remainder 0, 1 
    // and 2 respectively 
    
    // Step 2 and 3 get the sum of numbers and place them in 
    // corresponding queues 
    int i, sum; 
    for (i = 0, sum = 0; i < n; ++i) { 
        sum += arr[i]; 
        if ((arr[i] % 3) == 0)
            q0[b0++]=arr[i]; 
        else if ((arr[i] % 3) == 1) 
            q1[b1++]=arr[i]; 
        else
            q2[b2++]=arr[i]; 
    } 
  //printf("%d\n",sum);
    // Step 4.2: The sum produces remainder 1 
    if ((sum % 3) == 1) { 
        // either remove one item from queue1 
        if (f1!=b1) 
            f1++; 
        // or remove two items from queue2 
        else { 
            if (f2!=b2) 
                f2++; 
            else
                return 0; 
  
            if (f2!=b2) 
                f2++; 
            else
                return 0;
        } 
    } 
    // Step 4.3: The sum produces remainder 2 
    else if ((sum % 3) == 2) { 
        // either remove one item from queue2 
        if (f2!=b2)
            f2++; 
        // or remove two items from queue1 
        else { 
            if (f1!=b1) 
                f1++;  
            else
                return 0; 
  
             if (f1!=b1) 
                f1++;  
            else
                return 0;  
        } 
    } 
    populateAux(aux,q0,q1,q2); 
    bubblesort(aux,top); 
    for (int i=top-1;i>=0;i--) 
        printf("%d",aux[i]);
    return top; 
}

int main()
{
    scanf("%d",&n);
    for(int i=0;i<n;i++)
        scanf("%d",&arr[i]);
    if(findmaxnum(arr,n)==0)
        printf("not possible");
    return 0;
}
